#!/bin/bash

out_file=$HOME/time-tracking.tsv

function push_record {
    time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    entry="$time\t$1"
    echo -e $entry

    out=$2
    if [ ! -e $out ]; then
        echo -e "time\taction" >> $out
    fi

    echo -e $entry >> $out
}

function analyze {
    # add a stop record temporarily
    tmp_file=/tmp/time-tracking.tsv
    cp $out_file $tmp_file 
    push_record stop $tmp_file

    pq --backend=duckdb --from "tt=$tmp_file" '
    # function declaration that is a wrapper for substr SQL function
    func substr text start len -> s"substr({text}, {start}, {len})"
    
    
    # start of the pipeline
    from tt  # as declared in --from
    
    # compute a few new columns
    derive [
        date = substr time 0 11,     # extract date from column `time`
        prev_action = lag 1 action,  # lag action column
        prev_time = lag 1 time,     # lag time column
    ]
    
    # pick only rows that correspond to intervals that I want to track
    filter action == "stop" and prev_action == "start"
    
    # for each date
    group date (
        # sum durations of those intervals
        aggregate [sec = sum s"EXTRACT(EPOCH FROM {time - prev_time})"]
    )
    
    # compute more columns
    derive [
        hours = substr f"00{sec / (60 * 60)}" 0-2 2,
        minutes = substr f"00{(sec / 60) % 60}" 0-2 2,
        seconds = substr f"00{sec % 60}" 0-2 2,
    ]
    
    # expose only date and pretty-printed duration
    select [
        date,
        duration = f"{hours}:{minutes}:{seconds}"
    ]
    '

    rm $tmp_file
}

if [ -n "$1" ]; then
    push_record $1 $out_file
else
    analyze
fi


